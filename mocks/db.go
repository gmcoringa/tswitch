// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/db/db.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	db "github.com/gmcoringa/tswitch/pkg/db"
	gomock "github.com/golang/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockDatabase) Add(target string, installment *db.BinVersion, current bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", target, installment, current)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockDatabaseMockRecorder) Add(target, installment, current interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockDatabase)(nil).Add), target, installment, current)
}

// Get mocks base method.
func (m *MockDatabase) Get(target, version string) (*db.BinVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", target, version)
	ret0, _ := ret[0].(*db.BinVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDatabaseMockRecorder) Get(target, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDatabase)(nil).Get), target, version)
}

// GetCurrent mocks base method.
func (m *MockDatabase) GetCurrent(target string) (*db.BinVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrent", target)
	ret0, _ := ret[0].(*db.BinVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrent indicates an expected call of GetCurrent.
func (mr *MockDatabaseMockRecorder) GetCurrent(target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrent", reflect.TypeOf((*MockDatabase)(nil).GetCurrent), target)
}

// SetCurrent mocks base method.
func (m *MockDatabase) SetCurrent(target, version string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCurrent", target, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCurrent indicates an expected call of SetCurrent.
func (mr *MockDatabaseMockRecorder) SetCurrent(target, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrent", reflect.TypeOf((*MockDatabase)(nil).SetCurrent), target, version)
}
